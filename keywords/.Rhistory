z_normal(.5217917)
library(ISLR)
summary(Hitters)
Hitters=na.omit(Hitters)
with(Hitters, sum(is.na(Salary)))
summary(Salary)
library(leaps)
install.packages("leaps")
regfit.full= regsubsets(Salary~., data= Hitters)
summary(regfit.full)
library(leaps)
regfit.full= regsubsets(Salary~., data= Hitters)
summary(regfit.full)
regfut.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
reg.summary= summary(regfit.full)
reg.summary
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10,pch=20,col="red"])
points(10,reg.summary$cp[10],pch=20,col="red")
regfut.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
regfit.full= regsubsets(Salary~.,data=Hitters, nvmax= 19)
reg.summary= summary(regfit.full)
reg.summary
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],pch=20,col="red")
plot(regfit.full, scale="Cp")
coef(regfit.full, 10)
dim(Hitters)
set.seed(1)
train=sample(seq(263), 180, replace=FALSE)
train
regfit.fwd= regsubsets(Salary~., data=Hitters[trains,], nvmax=19, method="forward")
regfit.fwd = regsubsets(Salary~., data=Hitters[-trains,], nvmax=19, method="forward")
val.errors=rep(NA,19)
x.text=model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
dim(Hitters)
dim(Hitters)
set.seed(1)
train=sample(seq(263), 180, replace=FALSE)
train
regfit.fwd = regsubsets(Salary~., data=Hitters[-trains,], nvmax=19, method="forward")
regfit.fwd = regsubsets(Salary~., data=Hitters[train,], nvmax=19, method="forward")
val.errors=rep(NA,19)
x.text=model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
val.errors=rep(NA,19)
x.test =model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
for(i in 1:19){
coefi=coef(regfit.fwd, id=i)
pred= x.test[,names(coefi)]%*%coefi
val.errors[i]= mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors), ylab="Root MSE", ylim = c(300,400), pch=19, type= "b")
points(sqrt(regfit.fwd$rss[-1]/180), col="blue", pch=19, type= "b")
legend("topright", legend=c("Training","Validation"), col=c("blue","black"), pch=19)
seq(263)
val.errors
x.test
val.errors=(NA,2)
val.errors=(NA,3)
val.errors=rep(NA,3)
val.errors
val.errors=rep(NA,5)
val.errors
val.errors=rep(NA,19)
x.test = model.matrix(Salary~.,data=Hitters[-train,]) # notice the -index
coef(regfit.fwd, id=i)
x.test[,names(coefi)]%*%coefi
set.seed(11)
folds<-sample(rep(1:10, length=nrow(Hitters)))
folds
table(folds)
cv.error=matrix(NA,10,19)
for(k in 1:10){
best.fit= regsubsets(Salary~., data=Hitters[folds!=k,], nvmax=19, method="forward")
for(i in 1:19){
pred=predict(best.fit, Hitters[folds==k,], id=i)
cv.errors[k,i]=mean((Hitters$Salary[folds==k]-pred)^2)
}
}
library(glmnet)
install.packages("glmnet")
library(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitter$Salary
y=Hitters$Salary
fit.ridge= glmnet(x,y,alpha=0)
plot(fit.ridge, xvar="lambda", label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit.lasso=glmnet(x,y)
plot(fit.lasso, var="lambda", label=TRUE)
cv.lasso= cv.glmnet(x,y)
fit.lasso=glmnet(x,y)
lasso.tr= glmnet(x[train,], y[train])
lasso.tr
pred = predict(lasso.tr, x[-train,])
dim(pred)
lam.best=lasso.tr$lambda[order(rmse)[1]]
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda), rmse, type="b", xlab="Log(lambda)")
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr, s=lam.best)
head(Hitters)
head(Hitters[-1])
head(Hitters[,-1])
?sample
dim(Hitters)
?apply
```{r}
library(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitters$Salary
```
First we will fit a ridge-regression model. This is achieved by calling `glmnet` with `alpha=0` (see the helpfile). There is also a `cv.glmnet` function which will do the cross-validation for us.
```{r}
fit.ridge= glmnet(x,y,alpha=0)
plot(fit.ridge, xvar="lambda", label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
```
Now we fit a lasso model; for this we use the default `alpha=1`
```{r}
fit.lasso=glmnet(x,y)
plot(fit.lasso, var="lambda", label=TRUE)
#deviance is the r squared
plot(fit.lasso, var="dev", label=TRUE)
cv.lasso= cv.glmnet(x,y)
plot(cv.lasso)
coef(cv.lasso)
```
Suppose we want to use our earlier train/validation division to select the `lambda` for the lasso.
This is easy to do.
```{r}
lasso.tr= glmnet(x[train,], y[train])
lasso.tr
pred = predict(lasso.tr, x[-train,])
dim(pred)
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda), rmse, type="b", xlab="Log(lambda)")
#Gets the index of the least lambda
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr, s=lam.best)
names(cv.lasso)
coef(cv.lasso)
cv.lasso
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High= ifelse(Sales<=8, "No", "Yes")
Carseats=data.frame(Carseats, High)
Carseats
tree.carseats= tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
require(tree)
install.packages("tree")
require(tree)
tree.carseats<- tree(High~.-Sales, data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales, Carseats, subset=train)
plot(tree.carseats); text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats, Carseats[-train,], type="class")
with(Carseats[-train,] , table(tree.pred,High))
(72+33)/150
dim(Carseats)
dim(train)
sample(1:nrow(Carseats),250)
cv.carseats=cv.tree(tree.carseats, FUN= prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats= prune.misclass(tree.carseats, best = 13)
plot(prune.carseats); text(prune.carseats,pretty=0)
tree.pred= predict(prune.carseats, Carseats[-train,], type="class")
cv.carseats=cv.tree(tree.carseats, FUN= prune.misclass)    # this does cross validation
cv.carseats
plot(tree.carseats); text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats, Carseats[-train,], type="class") #-train will leave our test observations, type="class" for labels
with(Carseats[-train,] , table(tree.pred,High))   #High is a column of Carseats, and we want the testing values
(72+33)/150  #Correct divided by all.
(72+32)/150
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
?detach(Carseats)
rf.boston=randomForest(medv~.,data=Boston, subset=train)
rf.boston
fit$mse
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)^2))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)*(medv~pred)))
cat(mtry," ")
}
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv~pred)))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
obb.err
oob.err
oob.err =double(13)
test.err =double(13)
for(mtry in 1 : 13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry] = with(Boston[-train,],mean((medv~pred)*(medv~pred)))
cat(mtry," ")
}
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13){
fit= randomForest(medv~., data=Boston, subset=train, mtry=mtry, ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]= with(Boston[-train,], mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry, cbind(test.err, oob.err), pch=19, col=c("red","blue"), type="b",
ylab= "Mean Squared Error")
legend("topright",legend=c("OOB","Test"), pch=19, col=c("red","blue"))
require(gbm)
boost.boston=gbm(medv~., data=Boston[train,], distribution = "gaussian", n.trees=10000
, shrinkage=0.01, interaction.depth = 4)
summary(boost.boston)
plot(boost.boston, i="lstat")
plot(boost.boston, i="rm")
n.trees=seq(from=100, to=10000, by=100)
predmat= predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
dim(predmat)
predmat= predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
predmat = predict(boost.boston, newdata = Boston[-train], n.trees = n.trees)
predmat = predict(boost.boston, newdata = Boston[-train,], n.trees = n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
head(Boston)
n.trees=seq(from=100, to=10000, by=100)
predmat = predict(boost.boston, newdata = Boston[-train,], n.trees = n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees, berr, pch=19, ylab="Mean Squared Error", xlab="# Trees", main= "Boosting Test Error")
abline(h=min(test.err),col="red")
matrix(nrow= 4, ncol= 8)
?apply
t?
?t
require(devtools )
install_github(&quot;andreacirilloac/updateR&quot;)
install_github(&quot;andreacirilloac/updateR&quot;)
version
a=c(1,2,4)
b=c(1,2,2)
data.frame(cbind(a,b))
df=data.frame(cbind(a,b))
df %>% select(a)
rm(list=ls())
require("RPostgreSQL")
library(stringr)
library(RPostgreSQL)
library(stringdist)
library(plyr)
library(tm)
library(stringi)
#Clean the tweets before searching for keyword matching
clean_text<- function(text)
{
text = laply(text, function(text)
{
# clean up sentences with R's regex-driven global substitute, gsub():
text = gsub("[\']", " ", text)
text = gsub('[[:punct:]]', '', text)
text = gsub('[[:cntrl:]]', '', text)
text = gsub('\\d+', '', text)
text = stri_trans_general(text ,"Latin-ASCII")
text = gsub('http\\S+\\s*', '', text)
#Clean emojis
text <- sapply(text, function(row) iconv(row, "latin1", "ASCII", sub=" "))
names(text) <- NULL
# replace al \n
text <- gsub("[\n]", " ", text)
# convert to lower case:
text = tolower(text)
return(text)
})
###Remove Stopwords
stopWords<-stopwords(kind="french")
'%nin%' <- Negate('%in%')
text <-lapply(text, function(x) {
t <- unlist(strsplit(x, " "))
t[t %nin% stopWords]
})
text <- sapply(text, paste, collapse=" ")
return(text)
}
# Counts the amount of keywords presented in the tweet
count_substring = function(text,keywords) {
subcount = function(text,keywords){
kw = unlist(strsplit(keywords, ","))
c=0
for(i in length(kw)){
if(grepl(kw[i],text)){
c=c+1
} else {c}
}
return(c/length(kw))
}
mapply(subcount, text, keywords, USE.NAMES = FALSE)
}
##
getwd()
setwd("/Users/saulgarcia/Desktop/Github/SmartCity")
# loads the PostgreSQL driver
library(jsonlite)
login <- fromJSON("../login.json", flatten=TRUE)
drv = dbDriver("PostgreSQL")
con <- dbConnect(
drv, dbname = login$dbname,
host = login$host,
port = login$port,
user = login$user,
password = login$password
)
getwd()
setwd("/Users/saulgarcia/Desktop/Github/SmartCity/keywords")
login <- fromJSON("../login.json", flatten=TRUE)
drv = dbDriver("PostgreSQL")
con <- dbConnect(
drv, dbname = login$dbname,
host = login$host,
port = login$port,
user = login$user,
password = login$password
)
query_kw <- "
select
t.id::varchar(100), t.name
from
ip.interest_points t
where
t.in_use = True
and t.id::varchar(100) not in (
select distinct ip_id::varchar(100)
from twitter.keywords
)
;"
# Retreives the table from the database
names <- dbGetQuery(con, query_kw)
if(nrow(names)!=0){
unwanted_array = list(    'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A', 'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E',
'Ê'='E', 'Ë'='E', 'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O', 'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U',
'Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y', 'Þ'='B', 'ß'='Ss', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a', 'æ'='a', 'ç'='c',
'è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i', 'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o',
'ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ý'='y', 'ý'='y', 'þ'='b', 'ÿ'='y' )
#Remove Stopwords
stopwordsFr<-stopwords(kind="french")
stopwordsEn<-stopwords(kind="en")
stopWords<- c(stopwordsEn,stopwordsFr,"lyon")
names.lower<- as.data.frame(lapply(names, tolower))
names.lower$name<- as.character(names.lower$name)
names.lower$id <- as.character(names.lower$id)
#Clean
for(i in 1:nrow(names.lower)){
#Get rid of punctuations
names.lower[i,2]<-gsub('[[:punct:]]', " ", names.lower[i,2])
#Get rid of symbols
names.lower[i,2]<-gsub('[[:cntrl:]]', " ", names.lower[i,2])
#Get rid of the accents
names.lower[i,2]<-chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),
names.lower[i,2])
}
######## Remove StopWords #####################
'%nin%' <- Negate('%in%')
X<-lapply(names.lower[,2], function(x) {
t <- unlist(strsplit(x, " "))
t[t %nin% stopWords]
})
#Remove extra spaces
names.lower[,2]<- sapply(X, paste, collapse=",")
keywords = names.lower[,c(1,2)]
#Remove extra character
for(i in 1:nrow(keywords)){
keywords[i,2]<-gsub(",,,", ",", keywords[i,2])
}
names(keywords) = c("ip_id","keywords")
###Insert to DB
insert <- function(i, con, keywords) {
txt <- paste("INSERT into twitter.keywords values (",keywords$ip_id[i],", '",keywords$keywords[i],"');")
dbGetQuery(con, txt)
}
for (i in 1:length(keywords$ip_id)){
insert(i, con, keywords)
}
}
rm(query_kw)
#####################################################
############# MODEL TWEETS_TO_IP   ##################
# Query to retrieve combinations of Tweets - Kewyords
query_kw <- "
select
t.idd::varchar(100),
t.text,
k.ip_id,
k.keyword
from
twitter.tweets t,
twitter.keywords k
WHERE
t.idd in
(select distinct idd
from twitter.tweets
where
idd not in (
select distinct tweet_id
from twitter.processed_tweets
)
limit 2000);"
# Retreives the table from the database
df <- dbGetQuery(con, query_kw)
#processed_tweets = df %>% select(idd) %>% distinct(idd)
#trigger = processed_tweets %>% summarise(count = n_distinct(idd))
#trigger = trigger[[1]]
trigger = nrow(as.data.frame(unique(df$idd)))
#as.data.frame(a[!duplicated(a),])
#Clean Text
df$text_clean = clean_text(df$text)
#Count how many keywords appear in text
df$count = count_substring(df$text_clean, df$keyword)
if(trigger[[1]]>0){ #Run if there are tweets
insert <- function(i, con, processed_tweets) {
txt <- paste("INSERT into twitter.processed_tweets (tweet_id, processed_date) VALUES (",processed_tweets$idd[i],",  now() );")
dbGetQuery(con, txt)
}
for (i in 1:length(processed_tweets$idd)){
insert(i, con, processed_tweets)
}
}
library(dplyr)
processed_tweets = df %>% select(idd) %>% distinct(idd)
head(processed_tweets)
t=as.data.frame(unique(df$idd))
head(t)
trigger = nrow(processed_tweets)
processed_tweets = as.data.frame(unique(df$idd))
trigger = nrow(processed_tweets)
dbDisconnect(con)
rm(list=ls())
getwd()
